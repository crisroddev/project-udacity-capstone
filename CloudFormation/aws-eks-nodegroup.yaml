---
Description: >
  Cristian Rodriguez - Udacity DevOps Nanodegree 2020 - Capstone Project.
  CloudFormation Script to create EKS Nodes.

Parameters:
  EnvironmentName:
    Description: EnvironmentName that will be prefixed to resources
    ConstraintDescription: ENV is invalid! choose ENV from list
    Type: String
    Default: development
    AllowedValues:
      # ENV for development, create and test apps
      - development 
      # ENV to test apps before Go Live
      - staging
      # ENV to deploy on production and Go Live
      - production
  
  ImageID:
    Description: Image ID for the EC2 instance
    Type: String
  
  KeyPairName:
    Description: KeyPair to allow ssh acces to the instance
    Type: AWS::EC2::KeyPair::KeyName
  
  EC2Desired:
    Description: Desired instances on Startup
    Type: String

  MinSize:
    Description: Minimum number of web application servers
    Type: String

  MaxSize:
    Description: Maximum number of web application servers
    Type: String

Resources:
  ProfileInstance:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref RoleInstance

  RoleInstance:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:  
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
  
  NodesSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the EC2 instances.
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1025
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1025
          ToPort: 65535
          CidrIp: 0.0.0.0/0      
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
          - Key: !Sub
              - "kubernetes.io/cluster/${EksId}"
              - EksId:
                  Fn::ImportValue: !Sub "${EnvironmentName}-EKSID"
            Value: "owned"
  
  AutoScallingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Sub ${EC2Desired}
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      VPCZoneIdentifier:
        Fn::Split:
          - ","
          - Fn::ImportValue:
              Fn::Sub: ${EnvironmentName}-SUBNETS
      Tags:
        - Key: Name
          Value: !Sub
            - "${EksId}-NodesGroup-Node"
            - EksId:
                Fn::ImportValue: !Sub "${EnvironmentName}-EKSID"
          PropagateAtLaunch: "true"
        - Key: !Sub
            - kubernetes.io/cluster/${EksId}
            - EksId:
                Fn::ImportValue: !Sub "${EnvironmentName}-EKSID"
          Value: "owned"
          PropagateAtLaunch: "true"
    UpdatePolicy:
      AutoScallingRollingUpdate:
        MaxBatchSize: "1"
        MinInstancesInService: 3
        PauseTime: "PT5M"
  
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: "true"
      IamInstanceProfile: !Ref ProfileInstance
      ImageId: !Ref ImageID
      InstanceType: t2.medium
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref NodesSG
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 10
            VolumeType: gp2
            DeleteOnTermination: true
      UserData: 
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            set -o xtrace
            /etc/eks/bootstrap.sh ${EksId}
            /opt/aws/bin/cfn-signal --exit-code $? \
                      --stack ${AWS::StackName} \
                      --resource AutoScallingGroup \
                      --region {AWS::Region}
          - EksId:
              Fn::ImportValue: !Sub "${EnvironmentName}-EKSID"

Outputs:
  RoleInstance:
    Description: Instance Role created
    Value: !GetAtt RoleInstance.Arn
    Export:
      Name: !Sub ${EnvironmentName}-ROLE-INSTANCE
  NodeSG:
    Description: SG for EC2 Instances
    Value: !Ref NodesSG
    Export:
      Name: !Sub ${EnvironmentName}-Node-SG
...